# SCsub
Import('env')

env.Append(LIBPATH=['#modules/gdwlroots'])
env.Append(LIBS=['wlroots', "wlr_types", "wlr_xcursor", "wlr_xwayland", "wlr_backend", "wlr_backend_x11", "wlr_render", "wlr_util",  "wl_protos", "xcb", "pixman-1", "dbus-1", "systemd", "EGL",
  "input", "udev", "gbm", "drm", "wayland-egl", "wayland-client", "wayland-server", "xcb-composite", "xcb-xfixes",  "xcb-render", "xcb-shm", "xcb-icccm",  "xcb-xinput", "cap", "rt", "X11-xcb"])

env.ParseConfig("pkg-config xkbcommon --cflags --libs")
env.ParseConfig("pkg-config wayland-server --cflags --libs")
env.ParseConfig('pkg-config wlroots --cflags')

srcs = [
    "gles3_renderer.cpp",
    "keycode_map.cpp",
    "register_types.cpp",
    "renderer.cpp",
    "wayland_display.cpp",
    "wayland_global.cpp",
    "wlr_backend.cpp",
    "wlr_compositor.cpp",
    "wlr_data_device_manager.cpp",
    "wlr_keyboard.cpp",
    "wlr_output.cpp",
    "wlr_seat.cpp",
    "wlr_surface.cpp",
    "wlr_xdg_shell.cpp",
    "wlr_xwayland.cpp",
]

module_env = env.Clone(tools=['wayland-scanner'], toolpath=['tools'])

module_env.WaylandScanner("server-header",
    "xdg-shell-protocol.h", "xdg-shell.xml")
module_env.WaylandScanner("private-code", "xdg-shell.c", "xdg-shell.xml")

module_env.add_source_files(env.modules_sources, srcs + [
    "xdg-shell.c"
])

module_env.Append(CXXFLAGS=['-DWLR_USE_UNSTABLE', '-Imodules/gdwlroots/'])


# env.Dependency(target = 'wlroots', dependency = 'xkbcommon wayland-server')
